#!/bin/bash

# To make this work we need to create a object-versioned bucket for TF. The idea is to standardize bucket_name as follow
# 1. Once terraform.tfvars is created, we source it 
VER="0.1"

function _fatal() {
    echo "[FATAL] $*" >&2
    exit 42 
}

# guarantees all steps are succesful
#set -x 
set -e

source "terraform.tfvars" || _fatal "Couldnt find terraform.tfvars file. Please create it from DIST version"
BUCKET_AUTOSUFFIX="-mytfstate"
BUCKET_NAME="${project_id}${BUCKET_AUTOSUFFIX}"

echo "1. Now Im going to first create a versioned bucket named 'gs://$BUCKET_NAME'"
# find out how to create a evrsioned GCS bucket
gsutil mb gs://$BUCKET_NAME ||
    echo "Bucket might already exist. No biggie."
gsutil versioning set on "gs://$BUCKET_NAME"

# Unit Test that its all good
#gsutil versioning get "gs://$BUCKET_NAME"
# Output should look like this: https://cloud.google.com/storage/docs/using-object-versioning#set-cli 
gsutil versioning get "gs://$BUCKET_NAME" | grep Enabled || 
    _fatal "Woopsie. Something wrong. $BUCKET_NAME doesnt exist or has no versioning enabled."

echo "2. Now I need to patch the GCS TF file to hardcode the bucket name in it (no I cant check this as its different for every user). This is manual jinja-ing:"
( echo "# This is generated by `setup_tfstate_to_gcs.sh` v.$VER from 'gcs_state.tf.dist' template. Edit at your own RISK." 
  cat gcs_state.tf.dist | egrep -v "^##" | sed -e "s/_BUCKETNAME_CHANGEME_/$BUCKET_NAME/g"
) | tee gcs_state.tf
